//Sprite.h
#ifndef __SPRITE_H
#define __SPRITE_H

//**************************************************************
//***************** описание класса SPRITE *********************
//**************************************************************

// Процедуры вывода спрайтов подразумевают режим экрана 320*200, 256 color

class SCREEN;	//предварительное 'taltentive' объявление класса


//структура описывает заголовок файлов *.SPR
//эта структура находится в самом начале файла, начиная с нулевого смещения
struct FILEHEADER
{
	char Signature[10];	//сигнатура файла (должно быть "SPRITEFORM")
	DWORD Info;			//смещение до структуры SPRITEINFO от начала файла
    DWORD Sprite;		//смещение до спрайта от начала файла
    DWORD FileSize;		//размер файла (для проверки целостности)
};

//благодоря такой организации, можно наращивать, если это необходимо
//эту структуру, если ее расположить в конце файла,
//тогда при считывании недостающие элементы просто не будут читаться

//структура формата образа
struct SPRITEINFO
{
	WORD Len, Hei;	//размеры спрайта
	WORD Attribute;	//атрибуты спрайта
};


// Класс SPRITE предназначен для работы со спрайтами
//он позволяет хранить спрайты в ввиде массива
//у каждого спрайта есть свой уникальный идентификатор ID - произвольное число
//со спрайтами можно работать по его ID или просто по индексу (0,1,2,...)
// Текущая реализация класса SPRITE поддерживает только 256 цветные спрайты
//(один байт на точку).
// При создании спрайта в конструктуру нужно передать указатель на объект 
//SCREEN, в который будет производится вывод спрайтов и максимально число
//спрайтов для создаваемого объекта SPRITE.
// Класс поддерживает прозрачные спрайты - точки с кодом 0 
//могут не отображаться при выводе, если в свойствах спрайта указать атрибут
//SPRITETRANSPARENT
class SPRITE
{
public:

	//============== структура 'IMAGE' - описывает спрайта =================
	struct IMAGE
	{
		IMAGE()
		{
			Len=Hei=0;
			Datacolor=NULL;
			Attribute=0;
			ID=0;
		}
		WORD Len;			//ширина (в пикселях)
		WORD Hei;			//высота (в пикселях)
							//если Datacolor==0,//спрайт считается свободным
		char * Datacolor;	//указатель на данные о цвете точек самого спрайта
		WORD	Attribute;	//свойства спрайта
		int ID;				//идентификатор спрайта
		void Write(int x,int y,unsigned char color); //запись точки в спрайт
		unsigned char Read(int x,int y);			 //чтение точки в спрайт
	};

	//максимальное число спрайтов, которое можно создать для одного обьекта
	//класса SPRITE
	int SPRITES_MAX;

	//!!! здесь возникает конфликт из-за константы Windows, она имеет такое же имя!
	//атрибуты спрайта
	enum{
		SPRITETRANSPARENT=0x04 //спрайт имеет прозрачные пиксели (код 0 черный)
	};

private:
static	int	CountObject;	//число SPRITE объектов 

	IMAGE	*Sprites;		//адрес массива структур IMAGE
//	char	*DoubleBuffer;	//адрес теневого экрана
public:
	int	Counter;			//счетчик спрайтов
	SCREEN	*scr;			//указатель на объект SCREEN

	//конструктору необходимо  передать адрес SCREEN объекта
	//в который будет происходить вывод изображения
	SPRITE(SCREEN *, int spMax=100);

	//деструктор - уничтожает все созданные спрайты и сам обьект
	//класса SPRITE
	~SPRITE(void);

	void DeleteAllSprites();	

	//удалить спрайт с индексом n
	int Delete(int n);

	int find(int ID);	//поиск спрайта по его ID

    int find_free();		//возвращает ID для первого пустого спрайта

	//загрузить спрайт с диска как массив цветных точек
	int Load(char * fname, unsigned long offset, IMAGE );

    //загрузить спрайт с диска(файл имеет определенный формат)
	int LoadSpriteform(char * fname, IMAGE & im);

	//изменяет цвет каждой точки у спрайта Index на величину n
	void ModifyColor(int Index, char n);

    //создается новый спрайт. Содержание спрайта не определено
    int Create(IMAGE&);

//	//установка образа спрайта
//	void SetImage(IMAGE Image, int Index);

	//получения образа спрайта по его ID
	IMAGE far & GetImage(int ID);

//	//установить атрибуты спрайта с индексом Index
//	void SetAttribute(int Attribut, int Index);

	enum {
		SCROLL_UP=0x01,
		SCROLL_DOWN=0x02,
		SCROLL_LEFT=0x03,
		SCROLL_RIGHT=0x04
	};
	
	//сдвиг спрайта Index, в сторону F, на Num точек
	int Scroll(int Index, int F, int Num=1);

	//вывести в SCREEN спрайта по его идентификатору ID
	int Show(int x,int y, int ID,int =0);

	//вывести спрайт по его порядковому номеру Index (0,1,2, ...)
	// x,y - координаты вывода спрайта
	// Index - индекс спрайта
	// Def - атрибуты для функции bitblt
	// Возврат: TRUE - спрайт отображен, FALSE - отобразить спрайт не удалось
    int ShowDirect(int x,int y,int Index,int Def=0);
};

#endif